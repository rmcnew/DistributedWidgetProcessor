Liquid Fortress Widget Processor (LFWP) was developed using Python 3.9.1 on Linux.

It should be able to run under on other platforms that support Python 3, but it has not been tested exhaustively.

These instructions assume that you have little to no Python background, but should enable you to get LFWP running.

1.  Install Python 3 on your platform.

If you are using Linux or macOS, there's a good chance that you might have Python already installed.  Open a terminal and try running "python3 --version".  

If you are on another platform, point your web browser to: 

https://www.python.org 

where you can download the latest release and follow the installation instructions for your platform.

2.  Install virtualenv.

virtualenv is a localized Python package management system that allows Python packages to be installed locally for Python projects.    

Follow the virtualenv installation instructions at:
https://packaging.python.org/guides/installing-using-pip-and-virtualenv/

3.  Create a virtualenv environment

In the LFWP directory, run the following command:

python3 -m venv .venv

This will create an empty virtualenv environment in the ".venv" directory.  This will allow the LFWP Python libraries to be installed locally in the .venv directory rather than your computer's system Python directories (if any).

4.  Activate the virtualenv environment

In the LFWP directory, run the following command:

source .venv/bin/activate

This should prepend "(.venv)" to your shell prompt, letting you know that you are in the virtualenv.

5.  Install LFWP Python library dependencies

While inside the virtualenv and in the LFWP directory, run the following command:

pip install -r requirements.txt

This will install the Python packages needed to run LFWP in the virtualenv.


LFWP is now ready to run!  Here are some things to try:

A.  Run Unit Tests:

python3 -m unittest unit_tests/test*.py



== Running on Amazon Web Services (AWS) ==
LFWP can run on AWS if you provide a valid Access Key Id, Secret Access Key, and default AWS region.

The boto3 Python library provides easy use of AWS APIs.

boto3 expects to find your AWS Access Key Id and Secret Access Key in ~/.aws/credentials:

[default]
aws_access_key_id = YOUR_ACCESS_KEY
aws_secret_access_key = YOUR_SECRET_KEY

boto3 expects to find your default AWS region in  ~/.aws/config:

[default]
region=us-east-1

Replace "us-east-1" with your default AWS region if needed.

Your AWS configuration files will be queried by boto3 to enable the use of Amazon Web Services.

